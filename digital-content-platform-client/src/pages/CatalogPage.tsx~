// src/pages/CatalogPage.tsx
import React, { useEffect, useState } from 'react';
import { useAppDispatch, useAppSelector } from '../store/hooks';
import {RootState} from '../store';
import { fetchAllItems } from '../store/slices/digitalItemSlice';
import DigitalItemCard from '../components/catalog/DigitalItemCard';
import { useNavigate } from 'react-router-dom';
import './CatalogPage.css';


const CatalogPage: React.FC = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const { items, loading, error } = useAppSelector((state: RootState) => state.digitalItem);
  const [page, setPage] = useState(1);
  const pageSize = 10;

  useEffect(() => {
    dispatch(fetchAllItems({ page, pageSize }));
  }, [dispatch, page]);

  const handlePageChange = (newPage: number) => {
    setPage(newPage);
    window.scrollTo(0, 0);
  };

  const handleAddToCart = (id: string) => {
    // Здесь будет логика добавления в корзину (реализуется на следующем этапе)
    console.log(`Added item ${id} to cart`);
  };

  if (loading) return <div className="loading">Loading catalog...</div>;
  if (error) return <div className="error">Error: {error}</div>;

  return (
    <div className="catalog-page">
      <h1>Digital Content Catalog</h1>
      { items && items.items.length > 0 ? (
        <div className="catalog-grid">
          {items.items.map((item) => (
            <DigitalItemCard key={item.id} item={item} onAddToCart={handleAddToCart} />
          ))}
        </div>
      ) : (
        <div className="empty-catalog">
          <p>No items found in the catalog.</p>
          <button onClick={() => navigate('/create-item')}>Add Your Content</button>
        </div>
      )}

      {items && items.totalPages > 1 && (
        <div className="pagination">
          <button
            onClick={() => handlePageChange(page - 1)}
            disabled={page === 1}
            className="pagination-button"
          >
            Previous
          </button>
          <span className="pagination-info">
            Page {page} of {items.totalPages}
          </span>
          <button
            onClick={() => handlePageChange(page + 1)}
            disabled={page === items.totalPages}
            className="pagination-button"
          >
            Next
          </button>
        </div>
      )}
    </div>
  );
};

export default CatalogPage;